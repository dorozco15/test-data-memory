// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/19/2016 15:38:30"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    DataMemory
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module DataMemory_vlg_sample_tst(
	clock,
	clock_en,
	data_block,
	data_in,
	line_in,
	read_en,
	reset,
	word_in,
	write_block,
	write_en,
	sampler_tx
);
input  clock;
input  clock_en;
input [63:0] data_block;
input [15:0] data_in;
input [2:0] line_in;
input  read_en;
input  reset;
input [1:0] word_in;
input  write_block;
input  write_en;
output sampler_tx;

reg sample;
time current_time;
always @(clock or clock_en or data_block or data_in or line_in or read_en or reset or word_in or write_block or write_en)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module DataMemory_vlg_check_tst (
	blockReplaced,
	data_out,
	sampler_rx
);
input  blockReplaced;
input [15:0] data_out;
input sampler_rx;

reg  blockReplaced_expected;
reg [15:0] data_out_expected;

reg  blockReplaced_prev;
reg [15:0] data_out_prev;

reg  blockReplaced_expected_prev;
reg [15:0] data_out_expected_prev;

reg  last_blockReplaced_exp;
reg [15:0] last_data_out_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	blockReplaced_prev = blockReplaced;
	data_out_prev = data_out;
end

// update expected /o prevs

always @(trigger)
begin
	blockReplaced_expected_prev = blockReplaced_expected;
	data_out_expected_prev = data_out_expected;
end



// expected blockReplaced
initial
begin
	blockReplaced_expected = 1'bX;
end 
// expected data_out[ 15 ]
initial
begin
	data_out_expected[15] = 1'bX;
end 
// expected data_out[ 14 ]
initial
begin
	data_out_expected[14] = 1'bX;
end 
// expected data_out[ 13 ]
initial
begin
	data_out_expected[13] = 1'bX;
end 
// expected data_out[ 12 ]
initial
begin
	data_out_expected[12] = 1'bX;
end 
// expected data_out[ 11 ]
initial
begin
	data_out_expected[11] = 1'bX;
end 
// expected data_out[ 10 ]
initial
begin
	data_out_expected[10] = 1'bX;
end 
// expected data_out[ 9 ]
initial
begin
	data_out_expected[9] = 1'bX;
end 
// expected data_out[ 8 ]
initial
begin
	data_out_expected[8] = 1'bX;
end 
// expected data_out[ 7 ]
initial
begin
	data_out_expected[7] = 1'bX;
end 
// expected data_out[ 6 ]
initial
begin
	data_out_expected[6] = 1'bX;
end 
// expected data_out[ 5 ]
initial
begin
	data_out_expected[5] = 1'bX;
end 
// expected data_out[ 4 ]
initial
begin
	data_out_expected[4] = 1'bX;
end 
// expected data_out[ 3 ]
initial
begin
	data_out_expected[3] = 1'bX;
end 
// expected data_out[ 2 ]
initial
begin
	data_out_expected[2] = 1'bX;
end 
// expected data_out[ 1 ]
initial
begin
	data_out_expected[1] = 1'bX;
end 
// expected data_out[ 0 ]
initial
begin
	data_out_expected[0] = 1'bX;
end 
// generate trigger
always @(blockReplaced_expected or blockReplaced or data_out_expected or data_out)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected blockReplaced = %b | expected data_out = %b | ",blockReplaced_expected_prev,data_out_expected_prev);
	$display("| real blockReplaced = %b | real data_out = %b | ",blockReplaced_prev,data_out_prev);
`endif
	if (
		( blockReplaced_expected_prev !== 1'bx ) && ( blockReplaced_prev !== blockReplaced_expected_prev )
		&& ((blockReplaced_expected_prev !== last_blockReplaced_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port blockReplaced :: @time = %t",  $realtime);
		$display ("     Expected value = %b", blockReplaced_expected_prev);
		$display ("     Real value = %b", blockReplaced_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_blockReplaced_exp = blockReplaced_expected_prev;
	end
	if (
		( data_out_expected_prev[0] !== 1'bx ) && ( data_out_prev[0] !== data_out_expected_prev[0] )
		&& ((data_out_expected_prev[0] !== last_data_out_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_exp[0] = data_out_expected_prev[0];
	end
	if (
		( data_out_expected_prev[1] !== 1'bx ) && ( data_out_prev[1] !== data_out_expected_prev[1] )
		&& ((data_out_expected_prev[1] !== last_data_out_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_exp[1] = data_out_expected_prev[1];
	end
	if (
		( data_out_expected_prev[2] !== 1'bx ) && ( data_out_prev[2] !== data_out_expected_prev[2] )
		&& ((data_out_expected_prev[2] !== last_data_out_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_exp[2] = data_out_expected_prev[2];
	end
	if (
		( data_out_expected_prev[3] !== 1'bx ) && ( data_out_prev[3] !== data_out_expected_prev[3] )
		&& ((data_out_expected_prev[3] !== last_data_out_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_exp[3] = data_out_expected_prev[3];
	end
	if (
		( data_out_expected_prev[4] !== 1'bx ) && ( data_out_prev[4] !== data_out_expected_prev[4] )
		&& ((data_out_expected_prev[4] !== last_data_out_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_exp[4] = data_out_expected_prev[4];
	end
	if (
		( data_out_expected_prev[5] !== 1'bx ) && ( data_out_prev[5] !== data_out_expected_prev[5] )
		&& ((data_out_expected_prev[5] !== last_data_out_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_exp[5] = data_out_expected_prev[5];
	end
	if (
		( data_out_expected_prev[6] !== 1'bx ) && ( data_out_prev[6] !== data_out_expected_prev[6] )
		&& ((data_out_expected_prev[6] !== last_data_out_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_exp[6] = data_out_expected_prev[6];
	end
	if (
		( data_out_expected_prev[7] !== 1'bx ) && ( data_out_prev[7] !== data_out_expected_prev[7] )
		&& ((data_out_expected_prev[7] !== last_data_out_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_exp[7] = data_out_expected_prev[7];
	end
	if (
		( data_out_expected_prev[8] !== 1'bx ) && ( data_out_prev[8] !== data_out_expected_prev[8] )
		&& ((data_out_expected_prev[8] !== last_data_out_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_exp[8] = data_out_expected_prev[8];
	end
	if (
		( data_out_expected_prev[9] !== 1'bx ) && ( data_out_prev[9] !== data_out_expected_prev[9] )
		&& ((data_out_expected_prev[9] !== last_data_out_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_exp[9] = data_out_expected_prev[9];
	end
	if (
		( data_out_expected_prev[10] !== 1'bx ) && ( data_out_prev[10] !== data_out_expected_prev[10] )
		&& ((data_out_expected_prev[10] !== last_data_out_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_exp[10] = data_out_expected_prev[10];
	end
	if (
		( data_out_expected_prev[11] !== 1'bx ) && ( data_out_prev[11] !== data_out_expected_prev[11] )
		&& ((data_out_expected_prev[11] !== last_data_out_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_exp[11] = data_out_expected_prev[11];
	end
	if (
		( data_out_expected_prev[12] !== 1'bx ) && ( data_out_prev[12] !== data_out_expected_prev[12] )
		&& ((data_out_expected_prev[12] !== last_data_out_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_exp[12] = data_out_expected_prev[12];
	end
	if (
		( data_out_expected_prev[13] !== 1'bx ) && ( data_out_prev[13] !== data_out_expected_prev[13] )
		&& ((data_out_expected_prev[13] !== last_data_out_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_exp[13] = data_out_expected_prev[13];
	end
	if (
		( data_out_expected_prev[14] !== 1'bx ) && ( data_out_prev[14] !== data_out_expected_prev[14] )
		&& ((data_out_expected_prev[14] !== last_data_out_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_exp[14] = data_out_expected_prev[14];
	end
	if (
		( data_out_expected_prev[15] !== 1'bx ) && ( data_out_prev[15] !== data_out_expected_prev[15] )
		&& ((data_out_expected_prev[15] !== last_data_out_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_exp[15] = data_out_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module DataMemory_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg clock_en;
reg [63:0] data_block;
reg [15:0] data_in;
reg [2:0] line_in;
reg read_en;
reg reset;
reg [1:0] word_in;
reg write_block;
reg write_en;
// wires                                               
wire blockReplaced;
wire [15:0] data_out;

wire sampler;                             

// assign statements (if any)                          
DataMemory i1 (
// port map - connection between master ports and signals/registers   
	.blockReplaced(blockReplaced),
	.clock(clock),
	.clock_en(clock_en),
	.data_block(data_block),
	.data_in(data_in),
	.data_out(data_out),
	.line_in(line_in),
	.read_en(read_en),
	.reset(reset),
	.word_in(word_in),
	.write_block(write_block),
	.write_en(write_en)
);

// clock_en
initial
begin
	clock_en = 1'b0;
	clock_en = #30000 1'b1;
	clock_en = #960000 1'b0;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #10000 1'b1;
	#10000;
end 
// data_block[ 63 ]
initial
begin
	data_block[63] = 1'b1;
end 
// data_block[ 62 ]
initial
begin
	data_block[62] = 1'b0;
end 
// data_block[ 61 ]
initial
begin
	data_block[61] = 1'b1;
end 
// data_block[ 60 ]
initial
begin
	data_block[60] = 1'b0;
end 
// data_block[ 59 ]
initial
begin
	data_block[59] = 1'b1;
end 
// data_block[ 58 ]
initial
begin
	data_block[58] = 1'b0;
end 
// data_block[ 57 ]
initial
begin
	data_block[57] = 1'b1;
end 
// data_block[ 56 ]
initial
begin
	data_block[56] = 1'b0;
end 
// data_block[ 55 ]
initial
begin
	data_block[55] = 1'b1;
end 
// data_block[ 54 ]
initial
begin
	data_block[54] = 1'b0;
end 
// data_block[ 53 ]
initial
begin
	data_block[53] = 1'b1;
end 
// data_block[ 52 ]
initial
begin
	data_block[52] = 1'b0;
end 
// data_block[ 51 ]
initial
begin
	data_block[51] = 1'b1;
end 
// data_block[ 50 ]
initial
begin
	data_block[50] = 1'b0;
end 
// data_block[ 49 ]
initial
begin
	data_block[49] = 1'b1;
end 
// data_block[ 48 ]
initial
begin
	data_block[48] = 1'b0;
end 
// data_block[ 47 ]
initial
begin
	data_block[47] = 1'b1;
end 
// data_block[ 46 ]
initial
begin
	data_block[46] = 1'b0;
end 
// data_block[ 45 ]
initial
begin
	data_block[45] = 1'b1;
end 
// data_block[ 44 ]
initial
begin
	data_block[44] = 1'b1;
end 
// data_block[ 43 ]
initial
begin
	data_block[43] = 1'b1;
end 
// data_block[ 42 ]
initial
begin
	data_block[42] = 1'b0;
end 
// data_block[ 41 ]
initial
begin
	data_block[41] = 1'b1;
end 
// data_block[ 40 ]
initial
begin
	data_block[40] = 1'b1;
end 
// data_block[ 39 ]
initial
begin
	data_block[39] = 1'b1;
end 
// data_block[ 38 ]
initial
begin
	data_block[38] = 1'b0;
end 
// data_block[ 37 ]
initial
begin
	data_block[37] = 1'b1;
end 
// data_block[ 36 ]
initial
begin
	data_block[36] = 1'b1;
end 
// data_block[ 35 ]
initial
begin
	data_block[35] = 1'b1;
end 
// data_block[ 34 ]
initial
begin
	data_block[34] = 1'b0;
end 
// data_block[ 33 ]
initial
begin
	data_block[33] = 1'b1;
end 
// data_block[ 32 ]
initial
begin
	data_block[32] = 1'b1;
end 
// data_block[ 31 ]
initial
begin
	data_block[31] = 1'b1;
end 
// data_block[ 30 ]
initial
begin
	data_block[30] = 1'b1;
end 
// data_block[ 29 ]
initial
begin
	data_block[29] = 1'b0;
end 
// data_block[ 28 ]
initial
begin
	data_block[28] = 1'b0;
end 
// data_block[ 27 ]
initial
begin
	data_block[27] = 1'b1;
end 
// data_block[ 26 ]
initial
begin
	data_block[26] = 1'b1;
end 
// data_block[ 25 ]
initial
begin
	data_block[25] = 1'b0;
end 
// data_block[ 24 ]
initial
begin
	data_block[24] = 1'b0;
end 
// data_block[ 23 ]
initial
begin
	data_block[23] = 1'b1;
end 
// data_block[ 22 ]
initial
begin
	data_block[22] = 1'b1;
end 
// data_block[ 21 ]
initial
begin
	data_block[21] = 1'b0;
end 
// data_block[ 20 ]
initial
begin
	data_block[20] = 1'b0;
end 
// data_block[ 19 ]
initial
begin
	data_block[19] = 1'b1;
end 
// data_block[ 18 ]
initial
begin
	data_block[18] = 1'b1;
end 
// data_block[ 17 ]
initial
begin
	data_block[17] = 1'b0;
end 
// data_block[ 16 ]
initial
begin
	data_block[16] = 1'b0;
end 
// data_block[ 15 ]
initial
begin
	data_block[15] = 1'b1;
end 
// data_block[ 14 ]
initial
begin
	data_block[14] = 1'b1;
end 
// data_block[ 13 ]
initial
begin
	data_block[13] = 1'b0;
end 
// data_block[ 12 ]
initial
begin
	data_block[12] = 1'b1;
end 
// data_block[ 11 ]
initial
begin
	data_block[11] = 1'b1;
end 
// data_block[ 10 ]
initial
begin
	data_block[10] = 1'b1;
end 
// data_block[ 9 ]
initial
begin
	data_block[9] = 1'b0;
end 
// data_block[ 8 ]
initial
begin
	data_block[8] = 1'b1;
end 
// data_block[ 7 ]
initial
begin
	data_block[7] = 1'b1;
end 
// data_block[ 6 ]
initial
begin
	data_block[6] = 1'b1;
end 
// data_block[ 5 ]
initial
begin
	data_block[5] = 1'b0;
end 
// data_block[ 4 ]
initial
begin
	data_block[4] = 1'b1;
end 
// data_block[ 3 ]
initial
begin
	data_block[3] = 1'b1;
end 
// data_block[ 2 ]
initial
begin
	data_block[2] = 1'b1;
end 
// data_block[ 1 ]
initial
begin
	data_block[1] = 1'b0;
end 
// data_block[ 0 ]
initial
begin
	data_block[0] = 1'b1;
end 
// data_in[ 15 ]
initial
begin
	data_in[15] = 1'b1;
	data_in[15] = #780000 1'b0;
end 
// data_in[ 14 ]
initial
begin
	data_in[14] = 1'b1;
	data_in[14] = #780000 1'b0;
end 
// data_in[ 13 ]
initial
begin
	data_in[13] = 1'b1;
	data_in[13] = #780000 1'b0;
end 
// data_in[ 12 ]
initial
begin
	data_in[12] = 1'b1;
	data_in[12] = #780000 1'b0;
end 
// data_in[ 11 ]
initial
begin
	data_in[11] = 1'b1;
	data_in[11] = #780000 1'b0;
end 
// data_in[ 10 ]
initial
begin
	data_in[10] = 1'b1;
	data_in[10] = #780000 1'b0;
end 
// data_in[ 9 ]
initial
begin
	data_in[9] = 1'b1;
	data_in[9] = #780000 1'b0;
end 
// data_in[ 8 ]
initial
begin
	data_in[8] = 1'b1;
	data_in[8] = #780000 1'b0;
end 
// data_in[ 7 ]
initial
begin
	data_in[7] = 1'b1;
	data_in[7] = #780000 1'b0;
end 
// data_in[ 6 ]
initial
begin
	data_in[6] = 1'b1;
	data_in[6] = #780000 1'b0;
end 
// data_in[ 5 ]
initial
begin
	data_in[5] = 1'b1;
	data_in[5] = #780000 1'b0;
end 
// data_in[ 4 ]
initial
begin
	data_in[4] = 1'b1;
	data_in[4] = #780000 1'b0;
end 
// data_in[ 3 ]
initial
begin
	data_in[3] = 1'b1;
	data_in[3] = #780000 1'b0;
end 
// data_in[ 2 ]
initial
begin
	data_in[2] = 1'b1;
	data_in[2] = #780000 1'b0;
end 
// data_in[ 1 ]
initial
begin
	data_in[1] = 1'b1;
	data_in[1] = #780000 1'b0;
end 
// data_in[ 0 ]
initial
begin
	data_in[0] = 1'b1;
	data_in[0] = #780000 1'b0;
end 
// line_in[ 2 ]
initial
begin
	line_in[2] = 1'b0;
end 
// line_in[ 1 ]
initial
begin
	line_in[1] = 1'b0;
	line_in[1] = #190000 1'b1;
	line_in[1] = #570000 1'b0;
end 
// line_in[ 0 ]
initial
begin
	line_in[0] = 1'b1;
	line_in[0] = #190000 1'b0;
end 
// word_in[ 1 ]
initial
begin
	word_in[1] = 1'b1;
	word_in[1] = #300000 1'b0;
end 
// word_in[ 0 ]
initial
begin
	word_in[0] = 1'b1;
	word_in[0] = #190000 1'b0;
	word_in[0] = #110000 1'b1;
	word_in[0] = #160000 1'b0;
end 

// read_en
initial
begin
	read_en = 1'b0;
	read_en = #150000 1'b1;
	read_en = #60000 1'b0;
	read_en = #60000 1'b1;
	read_en = #60000 1'b0;
end 

// write_en
initial
begin
	write_en = 1'b0;
	write_en = #70000 1'b1;
	write_en = #50000 1'b0;
end 

// reset
initial
begin
	reset = 1'b1;
	reset = #50000 1'b0;
end 

// write_block
initial
begin
	write_block = 1'b0;
	write_block = #180000 1'b1;
	write_block = #20000 1'b0;
end 

DataMemory_vlg_sample_tst tb_sample (
	.clock(clock),
	.clock_en(clock_en),
	.data_block(data_block),
	.data_in(data_in),
	.line_in(line_in),
	.read_en(read_en),
	.reset(reset),
	.word_in(word_in),
	.write_block(write_block),
	.write_en(write_en),
	.sampler_tx(sampler)
);

DataMemory_vlg_check_tst tb_out(
	.blockReplaced(blockReplaced),
	.data_out(data_out),
	.sampler_rx(sampler)
);
endmodule

